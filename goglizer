#!/usr/bin/env python

import shutil
import stat
import getpass
import sys
import subprocess
import os
import re
import hashlib

if sys.version[0]=="3": raw_input=input

START_PATH = os.path.dirname(os.path.realpath(sys.argv[0]))
DOLMADES_PATH = os.path.expanduser('~')+'/.dolmades'

REPO_PATH = DOLMADES_PATH + "/repo"
ICON_PATH = DOLMADES_PATH + "/icons"
INST_PATH = DOLMADES_PATH + "/install"

class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   ITALIC = '\033[3m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

def printb(str):
    print(color.BOLD + str + color.END)

def printit(str):
    print(color.ITALIC + str + color.END)

def printu(str):
    print(color.UNDERLINE + str + color.END)

class GameElement(object):
    def __init__(self):
        self.lgDict = { 
            'en':'English', 'de':'German', 'fr':'French', 'it':'Italian', 'es':'Spanish', 'pl':'Polish', 'ru':'Russian', 'cz':'Czech', 
            'cn':'Chinese', 'hu':'Hungarian', 'jp':'Japanese', 'tr':'Turkish', 'ko':'Korean', 'nl':'Dutch', 'sv':'Swedish', 
            'no':'Norwegian', 'sv':'Swedish', 'fi':'Finnish', 'da':'Danish', 'br':'Brasilian', 'pt':'Portuguese', 'sk':'Slovak' 
            }
        self.elemId = ""
        self.name = ""
        self.path = ""
        self.size = ""
        self.updated = "" 
        self.language = ""

    def supportsLanguage(self, lg):
        if lg not in self.lgDict:
            return False

        return lg in self.supportedLanguages()

    def supportedLanguages(self):
        languages = []
        for l,L in self.lgDict.items():
            if L in self.language:
                languages.append(l)
        return languages


class GameEntry(object):

    def __init__(self):
        self.gamename = ""
        self.productId = ""
        self.title = ""
        self.icon = ""
        self.elements = []

    def exists(self, elemId):
        for element in self.elements:
            if (element.elemId == elemId):
                return True
        return False

    def add(self, gameElement):
        if self.exists(gameElement.elemId):
            print("Game Element exists already, not adding it")
        else:
            self.elements.append(gameElement)

    def supportsLanguage(self, lg):
        if lg not in self.lgDict:
            return False

        return lg in self.supportedLanguages()

    def supportedLanguages(self):
        supportedLanguages = []
        for elem in self.elements:
            supportedLanguages = set(elem.supportedLanguages() + list(supportedLanguages))
        return supportedLanguages

class GameList(object):

    def __init__(self):
        self.games = []

    def exists(self, pId_or_gn):
        for game in self.games:
            if (game.productId == pId_or_gn) or (game.gamename == pId_or_gn):
                return True
        return False

    def select(self, pId_or_gn):
        if self.exists(pId_or_gn):
            i = 0
            for game in self.games:
                if (game.productId == pId_or_gn) or (game.gamename == pId_or_gn):
                    self.selectedGame = i;
                    return True
                i = i+1
        return False

    def add(self, gameEntry):
        if self.exists(gameEntry.productId):
            print("Game exist already, not adding it")
            return False

        self.games.append(gameEntry)
        # select the most recently added game
        self.select(gameEntry.productId)
        return True

    def addElement(self, gameElement):
        self.games[self.selectedGame].add(gameElement)

    def getSelectedGame(self):
        return self.games[self.selectedGame]

    def readList(self, fn):
        with open(fn) as f:
            gameEntry = GameEntry()
            gameElem = GameElement()
            while True:
                line = f.readline()

                if not line:
                    break

                line = line.strip()

                if line.startswith("gamename: "):
                    gameEntry.gamename = line.replace("gamename: ","")
                if line.startswith("product id: "):
                    gameEntry.productId = line.replace("product id: ", "")
                if line.startswith("title: "):
                    gameEntry.title = line.replace("title: ", "")
                if line.startswith("icon: "):
                    gameEntry.icon = line.replace("icon: ", "")
                    self.add(gameEntry)
                    gameEntry = GameEntry()

                if line.startswith("id: "):
                    gameElem.elemId = line.replace("id: ","")
                if line.startswith("name: "):
                    gameElem.name= line.replace("name: ","")
                if line.startswith("path: "):
                    gameElem.path = line.replace("path: ","").split("/")[-1]
                if line.startswith("size: "):
                    gameElem.size = line.replace("size: ","")
                if line.startswith("updated: "):
                    gameElem.updated = line.replace("updated: ","")
                if line.startswith("language: "):
                    gameElem.language = line.replace("language: ","")
                    self.addElement(gameElem)
                    gameElem = GameElement()


class Main(object):
    udockerCmd =  START_PATH + "/udocker --quiet --repo="+REPO_PATH

    def __init__(self):
        self.prepareDirectories()
        self.lgDict = { 'en':'English', 'de':'German', 'fr':'French', 'it':'Italian', 'es':'Spanish', 'pl':'Polish', 'ru':'Russian', 'cz':'Czech', 'cn':'Chinese', 'hu':'Hungarian', 'jp':'Japanese', 'tr':'Turkish', 'ko':'Korean', 'nl':'Dutch', 'sv':'Swedish', 'no':'Norwegian', 'sv':'Swedish', 'fi':'Finnish', 'da':'Danish', 'br':'Brasilian', 'pt':'Portuguese', 'sk':'Slovak' }

        #self.prepareRuntime()

    def prepareDirectories(self):
        untouched = True
        if (not os.path.exists(DOLMADES_PATH)):
            os.mkdir(DOLMADES_PATH, 0755)
            untouched = False
        try:
            if (os.path.exists(REPO_PATH)):
                os.rmdir(REPO_PATH)
                untouched = False
        except:
            pass

        if (not os.path.exists(REPO_PATH)):
            cmd = START_PATH + "/udocker mkrepo "+REPO_PATH
            print(cmd)
            subprocess.call(cmd, shell=True, close_fds=True)
            untouched = False
        
        if (not os.path.exists(ICON_PATH)):
            os.mkdir(ICON_PATH, 0755)
            untouched = False
        if (not os.path.exists(INST_PATH)):
            os.mkdir(INST_PATH, 0755)
            untouched = False
        if (untouched):
            printit("Found dolmade repo under " + REPO_PATH)
        else:
            printit("Initialized dolmade repo under " + REPO_PATH)

    def prepareRuntime(self):
        cmd = self.udockerCmd+" pull dolmades/dolmades-docker:runtime"
        print("Pulling dolmades runtime container...")
        subprocess.call(cmd, shell=True, close_fds=True)

        cmd = self.udockerCmd + " rm dolmades-runtime"
        subprocess.call(cmd, shell=True, close_fds=True)

        cmd = self.udockerCmd + " create --name=dolmades-runtime dolmades/dolmades-docker:runtime"
        subprocess.call(cmd, shell=True, close_fds=True)
        print("done")

    def setGameTitle(self, title):
        gameTitle=title

    def downloadIngredients(self):
        printb("downloading ingredients for "+gameTitle)

    def updateGameList(self):
        printb("Fetching detailed info about games from GOG...")
        #lang = "--language "+self.languageSwitch
        lang = "--language all"

        cmd = self.udockerCmd+" run -i -t --user=$(whoami) --bindhome --hostauth dolmades-runtime lgogdownloader --list-detail --platform l  "+lang+" --exclude c,d,e > "+DOLMADES_PATH+"/gog.l.lst"
        print("Retrieving detailed linux game list...")
        subprocess.call(cmd, shell=True, close_fds=True)

        cmd = self.udockerCmd+" run -i -t --user=$(whoami) --bindhome --hostauth dolmades-runtime lgogdownloader --list-detail --platform l,w "+lang+" --exclude c,d,e > "+DOLMADES_PATH+"/gog.lw.lst"
        print("Retrieving detailed linux/windows game list...")
        subprocess.call(cmd, shell=True, close_fds=True)

        cmd = self.udockerCmd+" run -i -t --user=$(whoami) --bindhome --hostauth dolmades-runtime lgogdownloader --list-detail --platform w  "+lang+" --exclude c,d,e > "+DOLMADES_PATH+"/gog.w.lst"
        print("Retrieving detailed windows game list...")
        subprocess.call(cmd, shell=True, close_fds=True)

        self.readGameList()

        printb("done!")

    def readGameList(self):
        # FIXME check that game list files exist, if not call updateGameList() beforehand
        self.winGames = []
        winGames = subprocess.check_output(["grep", 'gamename: ',DOLMADES_PATH+"/gog.w.lst"]).split("\n")
        for winGame in winGames:
            self.winGames.append(winGame.replace("gamename: ",""))
        self.linGames = []
        linGames = subprocess.check_output(["grep", 'gamename: ',DOLMADES_PATH+"/gog.l.lst"]).split("\n")
        for linGame in linGames:
            self.linGames.append(linGame.replace("gamename: ",""))

    def showAvailableGames(self):
        if (self.showLinuxGames):
            printit("Windows games available on this account (bold: no linux installer available)")
        else:
            printit("Windows games available on this account which have no linux installer available")

        try:
            winGames = GameList()
            winGames.readList(DOLMADES_PATH+"/gog.lw.lst")
            linGames = GameList()
            linGames.readList(DOLMADES_PATH+"/gog.l.lst")
        except:
            printb("ERROR could not read game lists, run with -u")
            return

        for winGame in winGames.games:
            if (linGames.exists(winGame.productId)):
                if (self.showLinuxGames):
                    print(winGame.gamename + " in " + color.ITALIC + ",".join(winGame.supportedLanguages()) + color.END)
            else:
                print(color.BOLD + winGame.gamename + color.END + " in " + color.ITALIC + ",".join(winGame.supportedLanguages()) + color.END)

    def printHelp(self):
        printu("Usage:")
        print(" no arguments:" + color.ITALIC + " show all available win-only games" + color.END)
        print(" -a:" + color.ITALIC + " show all windows games (also those that have a linux installer)" + color.END)
        print(" -h:" + color.ITALIC + " print this help" + color.END)
        print(" -u:" + color.ITALIC + " update the dolmade runtime container and the GOG game list" + color.END)
        print(" -l=preferredLanguage,fallbackLanguage1,fallbackLanguage2,...:" + color.ITALIC + " use in combination with -d, when omitted installers will default to English (en)" + color.END)
        print(" -d=gameid:" + color.ITALIC + " generate a Dolmadefile for the game 'gameid' and download its ingredients" + color.END)

    def downloadIngredients(self, i):
        print("Downloading "+i+"...")
        cmd = self.udockerCmd+" run -i -t --user=$(whoami) --bindhome --hostauth dolmades-runtime lgogdownloader --download-file "+i+" --directory "+INST_PATH
        subprocess.call(cmd, shell=True, close_fds=True)

    def computeChecksum(self, filename):
        cmd = "sh -c 'sha256sum \""+filename+"\"|cut -f 1 -d \" \"'"
        chksum = subprocess.check_output(cmd, shell=True, close_fds=True, stderr=subprocess.STDOUT)
        return chksum

    def findInstaller(self, elems):
        installers = []
        lgs = self.languageSwitch.split(",")
        #longLg = { 'en':'English', 'de':'German', 'fr':'French', 'it':'Italian', 'es':'Spanish', 'pl':'Polish', 'ru':'Russian' }

        # iterate over all desired languages in order of preference
        for lg in lgs:
            # select those game elements which are installers of the current language
            for elem in elems:
                if "installer" in elem.elemId:
                    if (self.lgDict[lg] in elem.language):
                        if (elem not in installers) and (elem.path.endswith('.exe')):
                            installers.append(elem)

        # if none found add just those with 'en' language settings
        if (len(installers)==0):
            printb("No installer for the currently set language switch was found: "+self.languageSwitch)
            printb("Adding just English installer")
            for elem in elems:
                if "installer" in elem.elemId:
                    if (self.lgDict["en"] in elem.language):
                        if (elem not in installers) and (elem.path.endswith('.exe')):
                            installers.append(elem)

        # let user choose if needed
        if (len(installers)>1):
            printb("Please select the installer which should be used")
            n=1;
            for i in installers:
                print("("+str(n)+") "+i.language+" // "+i.path+" // "+i.elemId)
                n=n+1

            selection = 0
            while (selection<1) or (selection>n):
                try:
                    selection = int(raw_input('Choose a number: '))
                except ValueError:
                    print("Invalid selection")

            return installers[selection-1]

        if (len(installers)==1):
            printb("Just one installer found... going to use it!")
            return installers[0]

        if (len(installers)==0):
            printb("Bad! No installer found")
            return None


    def generateDolmadefile(self, gamename):
        try:
            games = GameList()
            games.readList(DOLMADES_PATH+"/gog.w.lst")
        except:
            printb("ERROR could not read game lists, try to run with -u")

        if not games.select(gamename):
            print(gamename+" not found, stopping")
            return False

        game = games.getSelectedGame()

        print("Generating Dolmadefile for "+gamename)
                
        dolmadefile = open(game.gamename+".dolmade","w")
        dolmadefile.write("# Name of the Dolmade\n")
        dolmadefile.write("DOLMADE\n")
        # FIXME this string should rather match the whatsoever being selected installer language
        #       but this is going to happen later and thus needs refactoring the code of this entire routine!
        preferredLg=self.languageSwitch.replace("-l=","").split(",")[0]
        dolmadefile.write("    "+game.title.replace(' ','_').replace('&','n')+":"+preferredLg+"\n\n")
        
        dolmadefile.write("# Docker image used as a base\n")
        dolmadefile.write("BASE\n")
        dolmadefile.write("    dolmades/dolmades-docker:winestable\n\n")

        dolmadefile.write("# Ingredients: sha256 / file name / display name / URL #1 / URL #2 / ...\n")
        dolmadefile.write("INGREDIENT\n")
        cmd = "sh -c 'curl -s "+game.icon+"|sha256sum|cut -f 1 -d \" \"'"
        chksum = subprocess.check_output(cmd, shell=True, close_fds=True, stderr=subprocess.STDOUT)
        dolmadefile.write("    "+chksum)
        icon_fn = game.icon.split("/")[-1]
        dolmadefile.write("    "+icon_fn+"\n")
        dolmadefile.write("    Game Icon\n")
        dolmadefile.write("    "+game.icon+"\n\n")

        ingredients=None
        for elem in game.elements:
            if (elem.language == "") or (self.lgDict[preferredLg] in elem.language):
                if ingredients:
                    ingredients=ingredients+","+game.gamename+"/"+elem.elemId
                else:
                    ingredients=game.gamename+"/"+elem.elemId

	# no ingredients found at all, fall back to 'en' ...
	if not ingredients:
	    for elem in game.elements:
		if (elem.language == "") or (self.lgDict["en"] in elem.language):
		    if ingredients:
			ingredients=ingredients+","+game.gamename+"/"+elem.elemId
		    else:
		    	ingredients=game.gamename+"/"+elem.elemId

        self.downloadIngredients(ingredients)

        try:
            myInstaller = self.findInstaller(game.elements)
            myInstallerFN = myInstaller.path.split("/")[-1]
        except:
            return False


        for elem in game.elements:
            if elem.elemId in ingredients:
                dolmadefile.write("INGREDIENT\n")
                ingredient=game.gamename+"/"+elem.elemId
                chksum=self.computeChecksum(INST_PATH+"/"+elem.path)
                dolmadefile.write("    "+chksum)
                dolmadefile.write("    "+elem.path+"\n")
                dolmadefile.write("    "+elem.name+"\n")
                dolmadefile.write("    gog://"+game.gamename+"/"+elem.elemId+"\n\n")

        dolmadefile.write("# Post-install custom packages like so\n")
        dolmadefile.write("#RUNROOT\n")
        dolmadefile.write("#    apt-get update && apt-get -y install custompkg && && apt-get clean && rm -rf /var/lib/apt/lists/*\n\n")

	dolmadefile.write("# Adapt some presets, for instance when a certain windows version must be enforced\n")
        dolmadefile.write("#RUNUSER\n")
	dolmadefile.write("#    winetricks winxp\n\n")

        dolmadefile.write("# Perform installation\n")
        dolmadefile.write("RUNUSER\n")
        dolmadefile.write("    wine start \""+myInstallerFN+"\"\n\n")

        dolmadefile.write("# Set icon for the Desktop shortcut\n")
        dolmadefile.write("ICON\n")
        dolmadefile.write("    "+icon_fn+"\n\n")

        dolmadefile.write("# Set the executable if you know its name. If omitted automatic detection will be performed\n")
        dolmadefile.write("#SETTARGET\n")
        dolmadefile.write("#    echo \"$(find /wineprefix/ -name BSTSD.exe)\"\n")
        return True

    def start(self):
        self.showHelp = False
        self.showGameMetadata = True
        self.showLinuxGames = False
        self.updateGameMetadata = False
        self.languageSwitch = "en"
        self.generateDolmade = None

        for arg in sys.argv:
            if (arg == '-u'):
                self.updateGameMetadata = True
            if (arg == '-a'):
                self.showLinuxGames = True
            if (arg.startswith('-l=')):
                self.languageSwitch = arg.replace("-l=","")
            if (arg == '-h'):
                self.showHelp = True
            if (arg.startswith('-d=')):
                self.showGameMetadata = False
                self.generateDolmade = arg.replace("-d=","")

        if (self.showHelp):
            self.printHelp()
            return

        if (self.updateGameMetadata):
            self.prepareRuntime()
            self.updateGameList()

        if (self.showGameMetadata):
            self.showAvailableGames()
            return

        if (self.generateDolmade):
            if (self.generateDolmadefile(self.generateDolmade)):
                printb("Dolmadefile successfully generated!")
            else:
                printb("Dolmadefile could not be generated!")
            return

if __name__ == "__main__":
    sys.exit(Main().start())
