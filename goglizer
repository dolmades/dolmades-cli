#!/usr/bin/env python

import shutil
import stat
import getpass
import sys
import subprocess
import os
import re
import hashlib

START_PATH = os.path.dirname(os.path.realpath(sys.argv[0]))
DOLMADES_PATH = os.path.expanduser('~')+'/.dolmades'

REPO_PATH = DOLMADES_PATH + "/repo"
ICON_PATH = DOLMADES_PATH + "/icons"
INST_PATH = DOLMADES_PATH + "/install"

class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   ITALIC = '\033[3m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

def printb(str):
    print(color.BOLD + str + color.END)

def printit(str):
    print(color.ITALIC + str + color.END)

def printu(str):
    print(color.UNDERLINE + str + color.END)

class GameElement(object):
    def __init__(self):
        self.elemId = ""
        self.name = ""
        self.path = ""
        self.size = ""
        self.updated = "" 
        self.language = ""

class GameEntry(object):

    def __init__(self):
        self.gamename = ""
        self.productId = ""
        self.title = ""
        self.icon = ""
        self.elements = []

    def exists(self, elemId):
        for element in self.elements:
            if (element.elemId == elemId):
                return True
        return False

    def add(self, gameElement):
        if self.exists(gameElement.elemId):
            print("Game Element exists already, not adding it")
        else:
            self.elements.append(gameElement)

class GameList(object):

    def __init__(self):
        self.games = []

    def exists(self, productId):
        for game in self.games:
            if (game.productId == productId):
                return True
        return False

    def select(self, productId):
        if self.exists(productId):
            i = 0
            for game in self.games:
                if (game.productId == productId):
                    self.selectedGame = i;
                    return True
                i = i+1
        return False

    def add(self, gameEntry):
        if self.exists(gameEntry.productId):
            print("Game exist already, not adding it")
            return False

        self.games.append(gameEntry)
        # select the most recently added game
        self.select(gameEntry.productId)
        return True

    def addElement(self, gameElement):
        self.games[self.selectedGame].add(gameElement)

    def getSelectedGame(self):
        return self.games[self.selectedGame]

    def readList(self, fn):
        with open(fn) as f:
            gameEntry = GameEntry()
            gameElem = GameElement()
            while True:
                line = f.readline()

                if not line:
                    break

                line = line.strip()

                if line.startswith("gamename: "):
                    gameEntry.gamename = line.replace("gamename: ","")
                if line.startswith("product id: "):
                    gameEntry.productId = line.replace("productId: ", "")
                if line.startswith("title: "):
                    gameEntry.title = line.replace("title: ", "")
                if line.startswith("icon: "):
                    gameEntry.icon = line.replace("icon: ", "")
                    self.add(gameEntry)
                    gameEntry = GameEntry()

                if line.startswith("id: "):
                    gameElem.elemId = line.replace("id: ","")
                if line.startswith("name: "):
                    gameElem.name= line.replace("name: ","")
                if line.startswith("path: "):
                    gameElem.path = line.replace("path: ","")
                if line.startswith("size: "):
                    gameElem.size = line.replace("size: ","")
                if line.startswith("updated: "):
                    gameElem.updated = line.replace("updated: ","")
                if line.startswith("language: "):
                    gameElem.language = line.replace("language: ","")
                    self.addElement(gameElem)
                    gameElem = GameElement()


class Main(object):
    udockerCmd =  START_PATH + "/udocker --quiet --repo="+REPO_PATH
    def prepareDirectories(self):
        untouched = True
        if (not os.path.exists(DOLMADES_PATH)):
            os.mkdir(DOLMADES_PATH, 0755)
            untouched = False
        try:
            if (os.path.exists(REPO_PATH)):
                os.rmdir(REPO_PATH)
                untouched = False
        except:
            pass
        if (not os.path.exists(ICON_PATH)):
            os.mkdir(ICON_PATH, 0755)
            untouched = False
        if (not os.path.exists(INST_PATH)):
            os.mkdir(INST_PATH, 0755)
            untouched = False
        if (untouched):
            printb("Found dolmade repo under " + REPO_PATH)
        else:
            printb("Initialized dolmade repo under " + REPO_PATH)


    def setGameTitle(self, title):
        gameTitle=title

    def downloadIngredients(self):
        printb("downloading ingredients for "+gameTitle)

    def updateGameList(self):
        printb("Fetching detailed info about games from GOG...")

        cmd = self.udockerCmd+" pull dolmades/dolmades-docker:runtime"
        print("Pulling dolmades runtime container...")
        subprocess.call(cmd, shell=True, close_fds=True)
        
        cmd = self.udockerCmd+" run -i -t --user=$(whoami) --bindhome --hostauth dolmades/dolmades-docker:runtime lgogdownloader --list-detail --platform l > "+DOLMADES_PATH+"/gog.l.lst"
        print("Retrieving detailed linux game list...")
        subprocess.call(cmd, shell=True, close_fds=True)

        cmd = self.udockerCmd+" run -i -t --user=$(whoami) --bindhome --hostauth dolmades/dolmades-docker:runtime lgogdownloader --list-detail --platform l,w > "+DOLMADES_PATH+"/gog.lw.lst"
        print("Retrieving detailed linux/windows game list...")
        subprocess.call(cmd, shell=True, close_fds=True)

        cmd = self.udockerCmd+" run -i -t --user=$(whoami) --bindhome --hostauth dolmades/dolmades-docker:runtime lgogdownloader --list-detail --platform w > "+DOLMADES_PATH+"/gog.w.lst"
        print("Retrieving detailed windows game list...")
        subprocess.call(cmd, shell=True, close_fds=True)

        printb("done!")

    def readGameList(self):
        self.winGames = []
        winGames = subprocess.check_output(["grep", 'gamename: ',DOLMADES_PATH+"/gog.lw.lst"]).split("\n")
        for winGame in winGames:
            self.winGames.append(winGame.replace("gamename: ",""))
        self.linGames = []
        linGames = subprocess.check_output(["grep", 'gamename: ',DOLMADES_PATH+"/gog.l.lst"]).split("\n")
        for linGame in linGames:
            self.linGames.append(linGame.replace("gamename: ",""))

    def showAvailableGames(self):
        if (self.showLinuxGames):
            printb("Windows games available on this account (bold: no linux installer available)")
        else:
            printb("Windows games available on this account which have no linux installer available")

        winGames = GameList()
        winGames.readList(DOLMADES_PATH+"/gog.lw.lst")
        linGames = GameList()
        linGames.readList(DOLMADES_PATH+"/gog.l.lst")
        for winGame in winGames.games:
            if (linGames.exists(winGame.productId)):
                if (self.showLinuxGames):
                    printu(winGame.gamename)
            else:
                print(color.UNDERLINE + color.BOLD + winGame.gamename + color.END)
            for elem in winGame.elements:
                printit( " "+elem.elemId+ " - "+elem.path+" - "+elem.name)

    def downloadIngredients(self):
        cmd = "curl -o "+ICON_PATH+"/"+self.gameTitle+".png " + iconUrl
        pass

    def generateDolmadefile(self):
        pass
        
    
    def start(self):
        self.prepareDirectories()
        #self.updateGameList()
        self.readGameList()
        self.showLinuxGames = False
        for arg in sys.argv:
            if (arg == '-u'):
                self.updateGameList()
            if (arg == '-l'):
                self.showLinuxGames = True

        self.showAvailableGames()


if __name__ == "__main__":
    sys.exit(Main().start())
