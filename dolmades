#!/usr/bin/env python2

import shutil
import stat
import sys
import subprocess
import shlex
import os
import re
import hashlib
import random

import config as cfg
from prettyprint import color, printb, printit, printitb, printu, printx

class Main(object):

    def randHex(self, size):
        return "".join(random.sample("0123456789abcdef", size))

    def randUUID(self):
        return (("%s-%s-%s-%s-%s") % (self.randHex(8), 
            self.randHex(4), self.randHex(4), self.randHex(4),
            self.randHex(12)))

    def handlePulseAudio(self):
        cmd = "which pasuspender"
        safe_cmd=shlex.split(cmd)
        proc=subprocess.Popen(safe_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = proc.communicate()
        self.paCmd=""

        if (proc.returncode==0):
            self.paCmd=out.split('\n')[0]
            print("Found PulseAudio, will use "+self.paCmd)

    def start(self):
        try:
            cmd = sys.argv[1]
        except:
            cmd = "help"

        if (cmd=='init'):
            cfg.INIT(True)

        if (cmd=='setup'):
            try:
                if (sys.argv[2].startswith('--')):
                    mode=sys.argv[2].split('=')[-1]
                    cfg.SETUP(sys.argv[3], mode)
                else:
                    cmdline=cfg.UDOCKERCMD_QUIET+" setup "+sys.argv[2]
                    print(cmdline)
                    subprocess.call(cmdline, shell=True, close_fds=True)
            except Exception as error:
                printx(error)

        if (cmd=='launch'):

            containerPath=cfg.DOLMADES_PATH+"/containers/"+sys.argv[2]

            fn=containerPath+"/configuredBinds"
            if not os.path.exists(fn):
                open(fn, 'a').close()

            f = open(fn,'r')
            binds=f.readlines()
            cmd_bind=''

            for bind in binds:
                bind=bind.strip()
                src=''.join(bind.split(':')[1:])
                dst=bind.split(':')[0]

                # ensure the destination inside the container exists
                # either as path or as file
                if dst.endswith('/'):
                    if not os.path.exists(containerPath+"/ROOT/"+dst):
                        os.makedirs(containerPath+"/ROOT/"+dst)
                else:
                    dstPath=''.join(dst.split('/')[:-1])
                    if dstPath:
                        if not os.path.exists(containerPath+"/ROOT/"+dstPath):
                            os.makedirs(containerPath+"/ROOT/"+dstPath)
                    print("touch "+containerPath+"/ROOT/"+dst)
                    subprocess.call("touch "+containerPath+"/ROOT/"+dst, shell=True, close_fds=True)

                cmd_bind=cmd_bind+" --volume="+src+":"+dst

            # FIXME this does not work for S1 engine!
            if os.path.exists(cfg.HOME+"/.Xauthority"):
                cmd_bind=cmd_bind+" --volume="+cfg.HOME+"/.Xauthority"

            self.handlePulseAudio()
            cmd=self.paCmd+" -- "+cfg.UDOCKERCMD_QUIET+" run --user="+cfg.USER\
                    +cmd_bind+" --hostenv --dri '"+sys.argv[2]+"' sh -x -c '/.dolmades/start.sh \""+"\" \"".join(sys.argv[3:])+"\"'"
            print(cmd)
            subprocess.call(cmd, shell=True, close_fds=True)

        if (cmd=='list'):
            cmd=cfg.UDOCKERCMD_QUIET+" ps"
            print(cmd)
            subprocess.call(cmd, shell=True, close_fds=True)

        if (cmd=='debug'):
            self.handlePulseAudio()

            cmd=self.paCmd+" -- "+cfg.UDOCKERCMD_QUIET+" run --user="+cfg.USER+\
                " --volume="+cfg.INST_PATH+":/"+cfg.INST_DIR+\
                " --bindhome --hostenv --env='WINEDLLOVERRIDES=winemenubuilder.exe=d' --hostauth --dri '"+sys.argv[2]+"' bash"
            print(cmd)
            subprocess.call(cmd, shell=True, close_fds=True)

        if (cmd=='debug-root'):
            cmd=cfg.UDOCKERCMD_QUIET+" run --user=root '"+sys.argv[2]+"' bash"
            print(cmd)
            print("HINT: if package installation fails it might not be supported by the execution engine!")
            subprocess.call(cmd, shell=True, close_fds=True)

        if (cmd=='import'):
            dn=sys.argv[2].split('/')[-1].split('.')[0]
            # FIXME check whether a container name 'dn' exists already
            uuid=self.randUUID()
            fn=os.path.realpath(sys.argv[2])
            path=os.path.realpath(cfg.DOLMADES_PATH+"/containers/"+uuid)
            cmd="mkdir -p "+path+" && cd "+path+" && tar -xzmvf "+fn
            print(cmd)
            subprocess.call(cmd, shell=True, close_fds=True)
            cmd=cfg.UDOCKERCMD_QUIET+" name "+uuid+" "+dn
            print(cmd)
            subprocess.call(cmd, shell=True, close_fds=True)

            # set to a supported engine
            cfg.SETUP(uuid)

            cmd=cfg.UDOCKERCMD_QUIET+" run --user="+cfg.USER+" --hostenv '"+dn+"""' bash -c 'mkdir -p /data; HOME=/data xvfb-run sh -c "wineboot --update && wineserver -w"'"""
            print(cmd)
            subprocess.call(cmd, shell=True, close_fds=True)

        if (cmd=='export'):
            fn=sys.argv[2]
            path=os.path.realpath(cfg.DOLMADES_PATH+"/containers/"+fn)
            cmd="""sh -c "tar --sort=name --mtime='@0' --format=gnu --owner=0 --group=0 --numeric-owner --directory="""+path+\
                    " -cp . | gzip -9 --no-name > "+fn+""".dme" """
            print(cmd)
            subprocess.call(cmd, shell=True, close_fds=True)

        if (cmd=='binds'):
            cn=sys.argv[2]
            fn=cfg.DOLMADES_PATH+"/containers/"+cn+"/configuredBinds"

            if not os.path.exists(fn):
                open(fn, 'a').close()

            f = open(fn,'r')
            print(f.read())


        if (cmd=='bind'):
            binds=sys.argv[3:]
            containerPath=cfg.DOLMADES_PATH+"/containers/"+sys.argv[2]
            fn=containerPath+"/configuredBinds"

            # remove all wine drives except c: and z:
            for drvletter in ['a','b','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y']:
                p=containerPath+"/ROOT/wineprefix/drive_"+drvletter
                if os.path.exists(p):
                    os.rmdir(p)
                pl=containerPath+"/ROOT/wineprefix/dosdevices/"+drvletter+":"
                if os.path.islink(pl):
                    os.remove(pl)

            f = open(fn,'w')
            for bind in binds:
                if cfg.DOLMADES_PATH.startswith(''.join(bind.split(':')[1:])):
                    print("You can reach DOLMADES_PATH using the bind "+bind+"! This is insecure and not allowed!")
                    return
                f.write(bind+"\n")
                bind=bind.strip()
                src=''.join(bind.split(':')[1:])
                dst=bind.split(':')[0]
                # create the destdir for wine drives
                if dst.startswith('/wineprefix/drive_'):
                    os.mkdir(containerPath+"/ROOT/"+dst)

            if (binds):
                f.seek(-1,os.SEEK_END)
                f.truncate()

            f.close

            # recreate proper symlinks for created wine drives
            for drvletter in ['a','b','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y']:
                p=containerPath+"/ROOT/wineprefix/drive_"+drvletter
                pl=containerPath+"/ROOT/wineprefix/dosdevices/"+drvletter+":"
                if os.path.exists(p):
                    if os.path.islink(pl):
                        os.remove(pl)
                    os.symlink("../drive_"+drvletter,pl)

        if (cmd=="serve" or cmd=="clearaway" or cmd=="del"):
            name = sys.argv[2]
            metaPath=cfg.DOLMADES_PATH+"/containers/"+name+"/ROOT/.dolmades"

            desktopFile=metaPath+"/Dolmades_v"+cfg.VERSION+"-"+name+".desktop"
            desktopUninstFile=metaPath+"/Dolmades_v"+cfg.VERSION+"-"+name+"_uninstaller.desktop"
            directoryFile=metaPath+"/Dolmades_v"+cfg.VERSION+".directory"
            descriptionFile=metaPath+"/description.txt"

            cleanName=name.replace('_',' ').replace('&',"_n_")

            with open(descriptionFile, "r") as f:
                description=f.read().replace('\n','\\n')

            if (description==""):
                print("No description, just using name")
                description=cleanName

            with open(directoryFile, "w") as f:
                f.write("[Desktop Entry]\nEncoding=UTF-8\nType=Directory\n")
                f.write("Name=Dolmades v"+cfg.VERSION+"\n")
                f.write("Comment=Windows Apps in Linux Containers\n")
                #f.write("Icon="+metaPath+"/icons/dolmade.png\n")
                f.write("Icon=Dolmades_v"+cfg.VERSION+"-menu\n")

            with open(desktopFile, "w") as f:
                f.write("[Desktop Entry]\nEncoding=UTF-8\nType=Application\n")
                f.write("Name="+cleanName+"\nGenericName=\""+description+"\"\nComment="+description+"\n")
                f.write("Icon="+metaPath+"/icon.png\n")
                f.write("Exec="+cfg.SELF_PATH+"/dolmades launch '"+name+"'\n")
                f.write("Path="+cfg.SELF_PATH+"\n")

            with open(desktopUninstFile, "w") as f:
                f.write("[Desktop Entry]\nEncoding=UTF-8\nType=Application\n")
                f.write("Name=Remove "+cleanName+"\nGenericName=Uninstall this Dolmade\nComment=Uninstall this Dolmade\n")
                f.write("Icon="+metaPath+"/icons/delete.svg\n")
                f.write("Exec="+cfg.SELF_PATH+"/dolmades del '"+name+"'\n")
                f.write("Path="+cfg.SELF_PATH+"\n")

            if (cmd=="serve"):
                action="install"
                cmdline = "xdg-desktop-menu "+action+" --novendor "+directoryFile+" "+desktopFile+" "+desktopUninstFile
            else:
                action="uninstall"
                cmdline = "xdg-desktop-menu "+action+" --novendor "+desktopFile+" "+desktopUninstFile

            print(cmdline)
            subprocess.call(cmdline, shell=True, close_fds=True)

            if (action=="install"):
                shutil.copy(metaPath+"/icons/dolmade.png",cfg.DOLMADES_PATH+"/dolmade.png")
                cmdline = "xdg-icon-resource "+action+" --novendor --size 22 "+cfg.DOLMADES_PATH+"/dolmade.png Dolmades_v"+cfg.VERSION+"-menu"
                print(cmdline)
                subprocess.call(cmdline, shell=True, close_fds=True)
            
            else:
                print("NOTE: menu icon is never to be uninstalled")

            cmdline = "xdg-desktop-icon "+action+" --novendor "+desktopFile
            print(cmdline)
            subprocess.call(cmdline, shell=True, close_fds=True)

            #os.remove(directoryFile)
            #os.remove(desktopFile)
            #os.remove(desktopUninstFile)

        if (cmd=="del"):
            cn=sys.argv[2]
            cmd=cfg.UDOCKERCMD_QUIET+" rm "+cn
            print(cmd)
            subprocess.call(cmd, shell=True, close_fds=True)
            try:
                boxedPath=cfg.BOXED_PATH
                print("This is a boxed dolmade, delete entire installation path "+boxedPath+"...")
                shutil.rmtree(boxedPath)
                print("Done")
            except:
                pass

        if (cmd=="help"):
            print("Usage: dolmades [init|launch|list|del|debug|debug-root|import|export|bind|binds|serve|clearaway] options")
            try:
                cmd = sys.argv[2]
            except:
                cmd = ""
            if cmd=="init":
                print(" init : initialize the dolmades runtime, DOLMADES_PATH")
            if cmd=="launch":
                print(" launch DOLMADENAME : launch the autostart script")
            if cmd=="list":
                print(" list : lists all available dolmades")
            if cmd=="del":
                print(" del DOLMADENAME : clears away and deletes the given dolmade")
            if cmd=="debug":
                print(" debug DOLMADENAME : enters a bash shell as $USER. $HOME and INSTALL_PATH under /install are available.")
            if cmd=="debug-root":
                print(" debug-root DOLMADENAME : enters a bash shell as root. No binds and host environment variables are available.")
            if cmd=="import":
                print(" import DOLMADE.DME : imports a previously exported image. The image can be executed standalone (requires python 2 and gzip).")
            if cmd=="export":
                print(" export DOLMADE DOLMADE.DME : exports a cooked dolmade image")
            if cmd=="bind":
                print(" bind DOLMADE bind1 bind2 ... : set bind1 bind2. To make your document folder available use '/wineprefix/drive_n:~/Documents/'")
            if cmd=="binds":
                print(" binds DOLMADENAME : list active binds")
            if cmd=="serve":
                print(" serve DOLMADENAME : create a menu entry and a desktop symbol")
            if cmd=="clearaway":
                print(" clearaway DOLMADENAME: remove menu entry and desktop symbol")
            if cmd=="setup":
                print("Usage: setup [--mode] DOLMADENAME: utilize the selected container engine\n        mode = [S1|P1|P2|auto], S1=singularity P1=proot with seccomp, P2=proot without seccomp, auto: test S1/P1/P2 and use the first one which works")

if __name__ == "__main__":
    sys.exit(Main().start())
