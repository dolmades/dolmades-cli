#!/usr/bin/env python

import sys
import subprocess
import os
import re
import hashlib
from PIL import Image
import pycurl

__author__ = "stefan.kombrink@gmail.com"
__credits__ = ["UDocker https://github.com/indigo-dc/udocker",
               "PRoot http://proot.me",
               "runC https://runc.io"]
__license__ = "Licensed under the Apache License, Version 2.0"
__version__ = "0.1"
__date__ = "2018"

# Python version major.minor
PY_VER = "%d.%d" % (sys.version_info[0], sys.version_info[1])
START_PATH = os.path.dirname(os.path.realpath(sys.argv[0]))

class Ingredient(object):

    def __init__(self, h, fn, dn, u):
        self.sha256hash = h
        self.displayName = dn
        self.fileName = fn
        self.installDir = "install"
        #if (not os.path.exists(self.installDir)): os.mkdir(self.installDir, 0755)
        self.urls = list()
        self.local_urls = list()
        self.addUrl(u)
        print("INGR: " + h + ":" + dn + ":" + fn + ":" + u)

    def addUrl(self, u):
        print(u)
        if (u.startswith('file://')):
            self.local_urls.append(u)
        else:
            self.urls.append(u)


    def downloadProgress(self, download_t, download_d, upload_t, upload_d):
        try:
            frac = float(download_d)/float(download_t)
        except:
            frac = 0
        sys.stdout.write("\r%s %3i%%" % ("Download:", frac*100)  )

    def checklocal(self):
        try:
            sha256 = hashlib.sha256()
            block_size=65536
            with open(self.installDir + "/" + self.fileName, 'rb') as f:
                for block in iter(lambda: f.read(block_size), b''):
                    sha256.update(block)
            if (sha256.hexdigest() != self.sha256hash):
                raise Exception('invalid hash sum for ingredient')
            else:
                print('Good: hash sum correct!')
                return True
        except Exception as error:
            print("Caught " + repr(error))
            return False

    def retrieve(self):
        # try to use local copy of the ingredient if available
        for u in self.local_urls:
            try:
                print("Using local copy of " + self.fileName + " from " + u)
                os.symlink(u.remove('file://'), self.installDir + "/" + self.fileName)
                if (self.checklocal()):
                    return True
                else:
                    continue
            except Exception as error:
                continue

        # try to retrieve ingredient from remote locations
        for u in self.urls:
            try:
                print("Retrieving " + self.fileName + " from " + u)
                with open(self.installDir + "/" + self.fileName, 'wb') as f:
                    c = pycurl.Curl()
                    c.setopt(pycurl.FOLLOWLOCATION, 1)
                    c.setopt(pycurl.MAXREDIRS, 5)
                    c.setopt(pycurl.CONNECTTIMEOUT, 30)
                    c.setopt(pycurl.TIMEOUT, 300)
                    c.setopt(pycurl.NOSIGNAL, 1)
                    c.setopt(pycurl.NOPROGRESS, 0)
                    c.setopt(pycurl.PROGRESSFUNCTION, self.downloadProgress)
                    c.setopt(c.URL, u)
                    c.setopt(c.WRITEDATA, f)
                    c.perform()
                    c.close()
                if (self.checklocal()):
                    return True   
                else:
                    continue
            except Exception as error:
                #print('Caught: ' + repr(error))
                continue

        return False


class Dolmade(object):

    repoDir='$HOME/.dolmades/repo'
    udocker=START_PATH + '/udocker'
    iconfn = None
    installDir='install'
    name = None
    ingredients = []
    runs = []

    def __init__(self):
        pass

    def dumpComment(self, cmdp):
        if (False):
            print(cmdp)

    def setupDolmade(self, cmdp):
        self.name = ' '.join(cmdp)
        print("Setting the Dolmade Name to " + self.name)

    def setupBase(self, cmdp):
        self.baseImg = ''.join(cmdp)
        print("Setting the Base Docker Image to " + self.baseImg)

    def setupIngredient(self, cmdp):
        h = cmdp[0]
        fn = cmdp[1]
        j = None
        for i in range(2,len(cmdp)):
            for url_pf in ['http://', 'https://', 'ftp://', 'file://']:
                if (cmdp[i].startswith(url_pf)): 
                    j=i
                    break
            if (j==i): break

        dn = ' '.join(cmdp[2:j-1])
        u = cmdp[j]
        print(h+":"+fn+":"+dn)
        print("Default URL:"+u)
        print(cmdp[j-1])
        ingr = Ingredient(h,fn,dn,u)
        
        for i in range(j+1,len(cmdp)):
            print("ADDING URL "+cmdp[i])
            ingr.addUrl(cmdp[i])

        self.ingredients.append(ingr)

    def detectInstallation(self):
        pass
        # find /wineprefix -name *.lnk -exec python /wineprefix/dumplnk.py {} \;

    def run(self, cmdp):
        print("Running as user..." + ' '.join(cmdp))
        self.runs.append(('user',cmdp))

    def runRoot(self, cmdp):
        print("Running as root..." + ' '.join(cmdp))
        self.runs.append(('root',cmdp))

    def icon(self, cmdp):
        self.iconfn = ''.join(cmdp)
        print("Selecting icon " + self.iconfn)

    def setTarget(self, cmdp):
        self.runs.append(('setTarget', cmdp))
        print("Determine target path by " + ' '.join(cmdp))
        
    def build(self):
        print("Performing the dolmade build...")
        for i in self.ingredients: 
            if (i.checklocal()):
                print("Ingredient already prepared")
            else:
                i.retrieve()

        cmd = self.udocker + " mkrepo " + self.repoDir
        print cmd
        try:
            outp = subprocess.check_output(cmd, shell=True, close_fds=True, stderr=subprocess.STDOUT)
        except:
            print("Repo exists already")

        cmd = self.udocker + " --repo=" + self.repoDir + " pull " + self.baseImg
        print cmd
        subprocess.call(cmd, shell=True, close_fds=True)

        cmd = self.udocker + " --repo=" + self.repoDir + " create " + self.baseImg
        print("Installing the sucessfully built dolmade...")
        sha256 = subprocess.check_output(cmd, shell=True, close_fds=True)

        cmd = self.udocker + " --repo=" + self.repoDir + " rm " + self.name
        print(cmd)
        subprocess.call(cmd, shell=True, close_fds=True)

        cmd = self.udocker + " --repo=" + self.repoDir + " name " + sha256.strip() + " " + self.name
        print(cmd)
        subprocess.call(cmd, shell=True, close_fds=True)

        for r in self.runs:
            (u,c) = r
            if (u == 'user'):
                cmd = self.udocker + " --repo=" + self.repoDir + " run --volume=$PWD/" + self.installDir + ":/install --user=$USER --volume=$HOME/.Xauthority --hostenv --dri " + self.name + " " + "bash -c 'cd /install && " + ' '.join(c) + "'"
                print(cmd)
                subprocess.call(cmd, shell=True, close_fds=True)
            if (u == 'setTarget'):
                cmd = self.udocker + " --quiet --repo=" + self.repoDir + " run --user=$USER --hostenv " + self.name + " bash -c '" + ' '.join(c) + "'"
                print(cmd)
                try:
                    outp = subprocess.check_output(cmd, shell=True, close_fds=True, stderr=subprocess.STDOUT)
                except:
                    print("ERROR: could not determine target path!")
                outp = outp.strip()
                self.target = ''.join(outp.split('/')[-1])
                self.targetPath = '/'.join(outp.split('/')[:-1])
                print("Target is "+self.target+", target path is "+self.targetPath)

class Main(object):
    dolmade = Dolmade()

    def execute(self):
        """all supported dolmade commands"""
        cmds = { '#': self.dolmade.dumpComment,
                 'DOLMADE': self.dolmade.setupDolmade, 
                 'BASE': self.dolmade.setupBase,
                 'INGREDIENT': self.dolmade.setupIngredient,
                 'RUN': self.dolmade.run,
                 'RUNROOT': self.dolmade.runRoot,
                 'ICON': self.dolmade.icon,
                 'SETTARGET': self.dolmade.setTarget }
        if (len(sys.argv)==1):
            inputFileName = os.getcwd() + "/Dolmadefile"
        else:
            inputFileName = sys.argv[1];

        try:
            with open(inputFileName, "r") as dolmadeFile:
                cmdarg = ""
                token = list()
                for line in dolmadeFile:
                    line = line.strip().replace('#','# ')
                    if (line.endswith('\\')): 
                        token += line.replace('\\','').strip().split(' ')
                        continue
                    if line: token += (line.split(' '))
                    if (len(token)>=1):
                        instr = token[0]
                        cmdarg = token[1:len(token)]
                        if (instr in cmds):
                            cmds[instr](cmdarg)
                        else:
                            raise Exception('Unknown instruction ' + instr + ":" + cmdarg)
                    token = list()

            self.dolmade.build()

        except (IOError, OSError):
            print("ERROR: Cannot open " + inputFileName)

    def start(self):
        """Program start and exception handling"""
        try:
            exit_status = self.execute()
        except (KeyboardInterrupt, SystemExit):
            self.cleanup()
            return 1
        except:
            self.cleanup()
            raise
        else:
            self.cleanup()
            return exit_status

    def cleanup(self):
        print("Deleting all temporary files...")


if __name__ == "__main__":
    sys.exit(Main().start())
