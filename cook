#!/usr/bin/env python2

import shutil
import stat
import sys
import subprocess
import os
import re
import hashlib

import config as cfg
from prettyprint import color, printb, printit, printitb, printu, printx

class Ingredient(object):

    def __init__(self, p, h, fn, dn, u):
        self.parent = p
        self.sha256hash = h
        self.displayName = dn
        self.fileName = fn
        self.urls = list()
        self.local_urls = list()
        self.gog_urls = list()
        self.addUrl(u)

    def addUrl(self, u):
        if (u.startswith('gog://')):
            self.gog_urls.append(u)
            return

        if (u.startswith('file://')):
            self.local_urls.append(u)
            return

        self.urls.append(u)

    def installPath(self):
        return cfg.INST_PATH+"/"+self.parent

    def checklocal(self):
        try:
            sha256 = hashlib.sha256()
            block_size=65536
            if not os.path.isfile(self.installPath() + "/" + self.fileName):
                printitb('File has yet to be retrieved!')
                return False
            with open(self.installPath() + "/" + self.fileName, 'rb') as f:
                for block in iter(lambda: f.read(block_size), b''):
                    sha256.update(block)
            if (sha256.hexdigest() != self.sha256hash):
                printitb('Error: '+self.fileName+' invalid hash sum for ingredient')
                return False
            else:
                printitb('Good: '+self.fileName+' hash sum correct!')
                return True
        except Exception as error:
            print("Caught " + repr(error))
            return False

    def retrieve(self):
        if self.checklocal():
            return True

        # try to use local copy of the ingredient if available
        for u in self.local_urls:
            try:
                printitb("Using local copy of " + self.fileName + " from " + u)
                shutil.copy(u.replace('file://',''), self.installPath() + "/" + self.fileName)
                if self.checklocal():
                    return True
                else:
                    continue
            except Exception as error:
                print(error)
                continue
        
        # try to obtain file via GOG downloader
        for u in self.gog_urls:
            try:
                printitb("Using a valid GOG account to download " + u + " as " + self.fileName)
                cmd = cfg.UDOCKERCMD_QUIET+\
                      " run --user=$(whoami) --bindhome --hostauth -v " + self.installPath()+\
                      """/:/wineprefix dolmades-runtime bash -c 'cd /wineprefix && lgogdownloader -o "/wineprefix/"""+self.fileName+\
                      '" --download-file '+u.replace("gog://","")+"'"
                print(cmd)
                subprocess.call(cmd, shell=True, close_fds=True)
                
            except Exception as error:
                print(error)
                continue

        # try to retrieve ingredient from remote locations
        for u in self.urls:
            try:
                printitb("Retrieving " + self.fileName + " from " + u)
                cmd = cfg.UDOCKERCMD_QUIET+\
                      " run --user=$(whoami) --volume="+self.installPath()+":/"+cfg.INST_DIR+\
                      " dolmades-runtime sh -c 'curl -o \"/"+cfg.INST_DIR+"/"+self.fileName+"\" -L \""+u+"\"'"
                print(cmd)
                subprocess.call(cmd, shell=True, close_fds=True)

                if self.checklocal():
                    return True   
                else:
                    continue
            except Exception as error:
                print('\nCaught: ' + repr(error))
                continue

        return False


class Dolma(object):

    iconfn = None
    name = None
    sha256 = None
    ingredients = []
    runs = []
    targetArgs = None
    targetEnvs = []
    targetPrlg = None

    def __init__(self, inputFileName):
        self.version = "latest"
        self.inputFileName = inputFileName
        cfg.INIT(False)

        cmd = cfg.UDOCKERCMD_QUIET+" inspect dolmades-runtime"

    def dumpComment(self, cmdp):
        if (False):
            print(cmdp)

    def checkVersion(self, version):
        self.version=''.join(version)
        if self.version == cfg.MAJOR_VERSION():
            printitb("Good! The dolmafile and this script both match major version "+self.version)
        else:
            printitb("Bad! The dolmafile is for major version "+self.version+", but this script for major version "+cfg.MAJOR_VERSION())
            sys.exit(1)

    def setupDolma(self, cmdp):
        # FIXME throw exception when these names are being used thus effectively prohibiting them
        self.name = ' '.join(cmdp).replace(':','-').replace('(','_').replace(')','_').replace('&','_n_')
        print(color.BOLD + "Setting Dolma Name to " + color.END + self.name)

    def setupBase(self, cmdp):
        self.baseImg = ''.join(cmdp)
        print(color.BOLD + "Setting Base Docker Image to " + color.END + self.baseImg)

    def setupDescription(self, cmdp):
        self.description = '\n'.join(cmdp)
        print(color.BOLD + "Setting Description to " + color.END + self.description)

    def setupIngredient(self, cmdp):
        p = self.name
        h = cmdp[0]
        fn = cmdp[1]
        dn = cmdp[2]
        u = cmdp[3].replace('file://~/','file://'+os.path.expanduser('~')+'/')

        sys.stdout.write(color.BOLD + "Adding Ingredient " + color.END + dn + ":" + fn + ":" + h + ":" + u)
        ingr = Ingredient(p,h,fn,dn,u)
        
        for i in range(4,len(cmdp)):
            isInvalid = True
            for url_pf in ['http://', 'https://', 'ftp://', 'file://', 'gog://']:
                if (cmdp[i].startswith(url_pf)): 
                    # calling user home dir expansion
                    cmdp[i]=cmdp[i].replace('file://~/','file://'+os.path.expanduser('~')+'/')
                    # TODO ~otheruser home dir expansion
                    sys.stdout.write(":" + cmdp[i])
                    ingr.addUrl(cmdp[i])
                    isInvalid = False
            if isInvalid:
                raise Exception("Malformed Url "+cmdp[i])

        self.ingredients.append(ingr)
        print("")

    def runUser(self, cmdp):
        print(color.BOLD + "Running as User:" + color.END + ' '.join(cmdp))
        self.runs.append(('user',cmdp))

    def runRoot(self, cmdp):
        print(color.BOLD + "Running as Root:" + color.END + ' '.join(cmdp))
        self.runs.append(('root',cmdp))

    def icon(self, cmdp):
        self.iconfn=''.join(cmdp)
        print(color.BOLD + "Selecting Icon:" + color.END + self.iconfn)

    def setTarget(self, cmdp):
        self.runs.append(('setTarget', cmdp))
        print(color.BOLD + "Determine target path by running:" + color.END + ' '.join(cmdp))

    def setTargetArgs(self, cmdp):
        self.targetArgs=' '.join(cmdp)
        print(color.BOLD + "Passing the following arguments to the target:" + color.END + self.targetArgs)

    def setTargetEnv(self, cmdp):
        env = ''.join(cmdp)
        self.targetEnvs.append(env)
        print(color.BOLD + "Passing the following environment variable to the target:" + color.END + env)

    def setTargetPrologue(self, cmdp):
        self.targetPrlg = ' '.join(cmdp)
        print(color.BOLD + "Passing the following prologue to the target:" + color.END + self.targetPrlg)

    def setBinds(self, cmdp):
        self.binds=cfg.GET_BINDS(cmdp)
        print(color.BOLD + "Passing the following default binds to the dolma:" + color.END + self.binds)

    def path(self, named=False):
        if self.sha256:
            if named:
                return cfg.DOLMADES_PATH+"/containers/"+self.name+"/ROOT/"
            else:
                return cfg.DOLMADES_PATH+"/containers/"+self.sha256+"/ROOT/"
        else:
            printitb("Error: Dolma has not been created yet!")
            return None

    def metaPath(self, named=False):
        path = self.path(named)
        if path:
            return self.path(named)+"/"+cfg.META_DIR
        else:
            return None

    def installPath(self, named=False):
        if named:
            return cfg.INST_PATH+"/"+self.name
        else:
            return cfg.INST_PATH+"/"+self.sha256

    def build(self, options):
        printitb("Preparing installation path...")
        cfg.INIT_INSTALL_PATH(self.name)

        printitb("Performing the dolma build...")
        for i in self.ingredients: 
            i.retrieve()

        cmd = cfg.UDOCKERCMD_VERBOSE+" pull "+self.baseImg+cfg.DOLMA_SUFFIX+":"+self.version
        print cmd
        subprocess.call(cmd, shell=True, close_fds=True)

        cmd = cfg.UDOCKERCMD_QUIET+" create "+self.baseImg+cfg.DOLMA_SUFFIX+":"+self.version
        self.sha256 = subprocess.check_output(cmd, shell=True, close_fds=True).strip()

        # prepare installation directory symlink
        cfg.INIT_INSTALL_PATH(self.name, self.sha256)

        # use proot without seccomp filtering
        # which is slower but works everywhere
        cfg.SETUP(self.sha256, "P2")

        cmd = cfg.UDOCKERCMD_QUIET+" rm "+self.name+" > /dev/null 2>& 1"
        print(cmd)
        subprocess.call(cmd, shell=True, close_fds=True)

        cmd = cfg.UDOCKERCMD_QUIET+" name "+self.sha256+" "+self.name
        print(cmd)
        subprocess.call(cmd, shell=True, close_fds=True)

        self.target = None
        self.targetPath = None

        printitb("Preparing environment and copying resouces...")

        shutil.copytree("resources/.dolmades", self.metaPath())
        shutil.copy("resources/targetLauncher", self.path()+"/usr/local/bin/")
        shutil.copy("resources/taskbarWrapper", self.path()+"/usr/local/bin/")

        cmd = cfg.UDOCKERCMD_QUIET+" run --user=root "+self.sha256+\
                """ sh -c 'echo "source /"""+cfg.META_DIR+"""/start.env" >> /etc/bash.bashrc'"""
        print(cmd)
        subprocess.call(cmd, shell=True, close_fds=True)

        printitb("Initializing wine prefix using mono/gecko...")
        cmd = cfg.UDOCKERCMD_QUIET+" run --user=root "+self.sha256+\
                """ sh -c 'mkdir -p /data; HOME=/data xvfb-run sh -c "wineboot --init && wineserver --wait"'"""
        print(cmd)
        subprocess.call(cmd, shell=True, close_fds=True)

        printitb("Running installation...")
        for r in self.runs:
            (u,c) = r
            if (u == 'root'):
                cmd = cfg.UDOCKERCMD_QUIET+" run --volume="+self.installPath()+":/"+cfg.INST_DIR+" --user=root --hostenv --dri "+\
                      self.sha256+" "+"bash -c 'cd /"+cfg.INST_DIR+" && "+' '.join(c)+"'"
                print(cmd)
                subprocess.call(cmd, shell=True, close_fds=True)
            if (u == 'user'):
                volBinds="--volume="+self.installPath()+":/"+cfg.INST_DIR+" --volume="+os.environ["XDG_CACHE_HOME"]
                # if ~/.Xauthority is used to authenticate to the X Server then bind it
                if os.path.exists(cfg.HOME+"/.Xauthority"):
                    volBinds=volBinds+" --volume="+cfg.HOME+"/.Xauthority"
                cmd = cfg.UDOCKERCMD_QUIET+" run "+volBinds+" --user="+cfg.USER+\
                      " --hostenv --dri "+self.sha256+" "+"bash -c 'cd /"+cfg.INST_DIR+" && "+' '.join(c)+" && wineserver --wait"+"'"
                print(cmd)
                subprocess.call(cmd, shell=True, close_fds=True)
            if (u == 'setTarget'):
                cmd = cfg.UDOCKERCMD_QUIET+" run --user="+cfg.USER+" --hostenv "+self.name+" bash -c '"+' '.join(c)+"'"
                print(cmd)
                try:
                    outp = subprocess.check_output(cmd, shell=True, close_fds=True, stderr=subprocess.STDOUT)
                    outp = outp.strip()
                    self.target = ''.join(outp.split('/')[-1])
                    self.targetPath = '/'.join(outp.split('/')[:-1])
                except:
                    printitb("ERROR: could not determine target path!")

        # now setting optimal engine
        cfg.SETUP(self.sha256)

        descInContainer = self.metaPath()+"/description.txt"
        f = open(descInContainer, 'w')
        try:
            f.write(self.description)
        except:
            printitb("No description predefined.")
        f.close()

        if (self.target):
            if self.targetArgs != None:
                tgtArgsAppendix=", target arguments: "+self.targetArgs
            else:
                tgtArgsAppendix=""

            if self.targetPrlg != None:
                printitb("Target prologue is "+self.targetPrlg)
                self.target = self.targetPrlg+' wine "'+self.target+'"'
            else:
                self.target = 'wine "'+self.target+'"'

            printitb("Predefined target is "+self.target+", target path is "+self.targetPath+tgtArgsAppendix)
        else:
            printitb("No target predefined. Target launcher will be used.")
            self.target=None
            self.targetPath=None

        with open(self.metaPath()+"/start.env", "a") as env_file:
            for e in self.targetEnvs:
                env_file.write("\nexport "+e)

        iconInContainer = self.metaPath()+"/icon.png"
        open(iconInContainer, 'w+')
        if self.iconfn!=None:
            name=self.iconfn.split('/')[-1]
            if not self.iconfn.startswith('/'):
                self.iconfn=None
                # case "icon resides somewhere under the installation directory"
                for root, dirs, files in os.walk(self.installPath()):
                    if name in files:
                        print("Found icon under installation directory...")
                        self.iconfn=os.path.join(root, name)
                        break
                # case "icon resides somewhere under drive C"
                for root, dirs, files in os.walk(self.path()+'/wineprefix/drive_c'):
                    if name in files:
                        print("Found icon under drive C...")
                        self.iconfn=os.path.join(root, name)
                        break
                if self.iconfn==None:
                    printitb("Error: icon file name nowhere found!")
            else:
                print("Absolute location for icon file given")
                self.iconfn=self.path()+self.iconfn

            # put icon file directly under installation path
            if not self.iconfn == self.installPath()+"/"+name:
                shutil.copy(self.iconfn, self.installPath()+"/"+name)
            cmd = cfg.UDOCKERCMD_QUIET+" run --user="+cfg.USER+" -v=" + self.installPath()+"/"+name+":/"+name+\
                  " -v="+iconInContainer+":/wineprefix/icon.png dolmades-runtime sh -c 'convert -adaptive-resize 128x128 /"+\
                  name+"[0] "+"/wineprefix/icon.png'"
            print(cmd)
            subprocess.call(cmd, shell=True, close_fds=True)
            printb("Icon successfully prepared!")
        else:
            printb("No icon specified, using default icon")
            shutil.copy(self.metaPath()+"/icons/dolmade.png", iconInContainer)

        shutil.copy(self.inputFileName, self.metaPath()+"/Dolmafile")
        shutil.copy(cfg.DOLMADES_PATH+"/dolmades-bin.tgz", self.metaPath()+"/dolmades-bin.tgz")

        if ( self.targetPath!=None and self.target!=None):
            runscriptInContainer = self.metaPath()+"/start.sh"

            with open(runscriptInContainer, "w") as f:
                f.write("#!/bin/bash\n")
                f.write('cd "'+self.targetPath+'"\n')
                if self.targetArgs:
                    f.write(self.target+" "+self.targetArgs+"\n")
                else:
                    f.write(self.target+"\n")

            st = os.stat(runscriptInContainer)
            os.chmod(runscriptInContainer, st.st_mode | stat.S_IEXEC)

        if "--serve" in options:
            cmd = cfg.SELF_PATH+"/dolmades serve '"+self.name+"'"
            print(cmd)
            subprocess.call(cmd, shell=True, close_fds=True)

        if not "--nobinds" in options:
            printitb("Setting binds.")
            cmd = cfg.SELF_PATH+"/dolmades bind '"+self.name+"' "+self.binds 
            print(cmd)
            subprocess.call(cmd, shell=True, close_fds=True)


class Main(object):
    def executeCmd(self, cmdarg):
        """all supported commands"""
        cmds = { '': self.dolma.dumpComment,
                 '#': self.dolma.dumpComment,
                 'VERSION': self.dolma.checkVersion,
                 'DOLMA': self.dolma.setupDolma, 
                 'BASE': self.dolma.setupBase,
                 'DESCRIPTION': self.dolma.setupDescription,
                 'INGREDIENT': self.dolma.setupIngredient,
                 'RUNUSER': self.dolma.runUser,
                 'RUNROOT': self.dolma.runRoot,
                 'ICON': self.dolma.icon,
                 'TARGET': self.dolma.setTarget,
                 'TARGETARGS': self.dolma.setTargetArgs,
                 'TARGETENV': self.dolma.setTargetEnv,
                 'TARGETPROLOGUE': self.dolma.setTargetPrologue,
                 'BINDS': self.dolma.setBinds}

        if len(cmdarg)<1:
            return

        cmd = cmdarg[0]
        arg = cmdarg[1:len(cmdarg)]

        if (cmd in cmds):
            cmds[cmd](arg)
        else:
            raise Exception('Unknown instruction ' + cmd + ":" + " ".join(cmdarg))

    def execute(self):
        if (len(sys.argv)<2):
            print("Usage: cook [--serve|--no-download|--no-validate|--hard-validate] Dolmafile")
            print("       --serve: generates a desktop icon and menu entries")
            print("       --no-download: use only local ingredients [NOT IMPLEMENTED YET]")
            print("       --no-validate: do not validate ingredients using their checksums [NOT IMPLEMENTED YET]")
            print("       --hard-validate: fail when an ingredient has a wrong checksum [NOT IMPLEMENTED YET]")
            return

        inputFileName = None
        options = []
        for a in sys.argv[1:]:
            if a.startswith("--"):
                options.append(a)
            else:
                inputFileName = a
        
        self.dolma = Dolma(inputFileName)

        try:
            with open(inputFileName, "r") as dolmaFile:
                cmdarg = list()
                while True:
                    line = dolmaFile.readline();
                    if line:
                        if line.strip().startswith('#'):
                            continue
                        if line.startswith((' ','\t')) and not line.strip() == "":
                            cmdarg.append(line.strip())
                        else:
                            self.executeCmd(cmdarg)
                            cmdarg = list()
                            cmdarg.append(line.strip())
                    else:
                        break

                self.executeCmd(cmdarg)

        except (IOError, OSError):
            print("ERROR: Cannot open " + inputFileName)

        self.dolma.build(options)

    def start(self):
        """Program start and exception handling"""
        try:
            exit_status = self.execute()
        except (KeyboardInterrupt, SystemExit):
            self.cleanup()
            return 1
        except:
            self.cleanup()
            raise
        else:
            self.cleanup()
            return exit_status

    def cleanup(self):
        print("Deleting all temporary files...")


if __name__ == "__main__":
    sys.exit(Main().start())

